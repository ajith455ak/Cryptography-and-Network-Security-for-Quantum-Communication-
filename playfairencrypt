import numpy as np
import string

def generate_playfair_matrix(key):
    key = "".join(dict.fromkeys(key.upper().replace("J", "I")))  # Remove duplicates, replace J with I
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix_string = key + "".join(c for c in alphabet if c not in key)
    return np.array(list(matrix_string)).reshape(5, 5)

def find_position(matrix, letter):
    row, col = np.where(matrix == letter)
    return row[0], col[0]

def encrypt_digraphs(matrix, text):
    text = text.upper().replace("J", "I").replace(" ", "")
    digraphs = []
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i + 1] if i + 1 < len(text) else "X"
        if a == b:
            digraphs.append(a + "X")
            i += 1
        else:
            digraphs.append(a + b)
            i += 2
    
    encrypted_text = ""
    for a, b in digraphs:
        row_a, col_a = find_position(matrix, a)
        row_b, col_b = find_position(matrix, b)
        
        if row_a == row_b:
            encrypted_text += matrix[row_a, (col_a + 1) % 5] + matrix[row_b, (col_b + 1) % 5]
        elif col_a == col_b:
            encrypted_text += matrix[(row_a + 1) % 5, col_a] + matrix[(row_b + 1) % 5, col_b]
        else:
            encrypted_text += matrix[row_a, col_b] + matrix[row_b, col_a]
    
    return encrypted_text

def playfair_encrypt():
    key = input("Enter the encryption key: ")
    text = input("Enter the plaintext: ")
    matrix = generate_playfair_matrix(key)
    encrypted_text = encrypt_digraphs(matrix, text)
    print("Encrypted text:", encrypted_text)

if __name__ == "__main__":
    playfair_encrypt()
